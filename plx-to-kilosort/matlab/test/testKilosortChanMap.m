% Exercise the kilosortChanMap() code and make correctness assertions.
function testKilosortChanMap()

%% Defaults.
nChans = 16;
chanMap = kilosortChanMap(nChans);
expectedChanMap = struct( ...
    'Nchannels', nChans, ...
    'chanMap', (1:nChans)', ...
    'connected', true(nChans, 1), ...
    'xcoords', ones(nChans, 1), ...
    'ycoords', (1:nChans)', ...
    'kcoords', ones(nChans, 1));
assert(isequal(chanMap, expectedChanMap), 'Should fill in sensible defaults');


%% Custom y-values.
nChans = 16;
chanY = [8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9];
chanMap = kilosortChanMap(nChans, [], chanY);
expectedChanMap = struct( ...
    'Nchannels', nChans, ...
    'chanMap', (1:nChans)', ...
    'connected', true(nChans, 1), ...
    'xcoords', ones(nChans, 1), ...
    'ycoords', chanY, ...
    'kcoords', ones(nChans, 1));
assert(isequal(chanMap, expectedChanMap), 'Should use custom y coordinates');


%% Non-connected channels.
nChans = 16;
connected = false(nChans, 1);
connected([1,3]) = true;
chanMap = kilosortChanMap(nChans, [], [], [], connected);
expectedChanMap = struct( ...
    'Nchannels', nChans, ...
    'chanMap', (1:nChans)', ...
    'connected', connected, ...
    'xcoords', ones(nChans, 1), ...
    'ycoords', (1:nChans)', ...
    'kcoords', ones(nChans, 1));
assert(isequal(chanMap, expectedChanMap), 'Should use custom channel connected');


%% Squeeze non-connected channels.
nChans = 16;
connected = false(nChans, 1);
connected([3, 10]) = true;
chanMap = kilosortChanMap(nChans, [], [], [], connected, true);
expectedChanMap = struct( ...
    'Nchannels', 2, ...
    'chanMap', [1 2]', ...
    'connected', [true true]', ...
    'xcoords', [1 1]', ...
    'ycoords', [3 10]', ...
    'kcoords', [1 1]');
assert(isequal(chanMap, expectedChanMap), 'Should omit non-connected channels');
